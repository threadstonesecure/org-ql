#+TITLE: org-ql

# NOTE: Using =BEGIN_HTML= for this causes TeX/info export to fail, but this HTML block works.
#+HTML: <a href=https://alphapapa.github.io/dont-tread-on-emacs/><img src="images/dont-tread-on-emacs-150.png" align="right"></a>

# NOTE: To avoid having this in the info manual, we use HTML rather than Org syntax; it still appears with the GitHub renderer.
#+HTML: <a href="https://melpa.org/#/org-ql"><img src="https://melpa.org/packages/org-ql-badge.svg"></a> <a href="https://stable.melpa.org/#/org-ql"><img src="https://stable.melpa.org/packages/org-ql-badge.svg"></a>

This package provides a query language for Org files.  It offers two syntax styles: Lisp-like sexps and search engine-like keywords.

It includes three libraries: The =org-ql= library is flexible and may be used as a backend for other tools.  The libraries =org-ql-search= and =helm-org-ql= provide interactive search commands and saved views.

* Contents
:PROPERTIES:
:TOC:      :include siblings :depth 0 :ignore this :force depth
:END:
:CONTENTS:
- [[#screenshots][Screenshots]]
- [[#installation][Installation]]
- [[#usage][Usage]]
- [[#changelog][Changelog]]
:END:


* Screenshots

[[images/org-ql-search.gif]]

[[images/org-ql-view-dispatch.gif]]

[[images/helm-org-ql.gif]]

[[images/org-ql-view-sidebar.gif]]

* Installation
:PROPERTIES:
:TOC:      ignore-children
:END:

The package may be installed directly from [[https://melpa.org/#/org-ql][MELPA]] or with other tools like [[https://framagit.org/steckerhalter/quelpa][Quelpa]].

After installation, you can use the commands without additional configuration.  /Note: The command =helm-org-ql= only works if the package =helm-org= is installed; Helm is not a dependency of this package, so it's not automatically installed./

To use the functions and macros in your own Elisp code, use libraries =org-ql= and =org-ql-view=.

** Quelpa

Installing with [[https://framagit.org/steckerhalter/quelpa][Quelpa]] is easy:

1.  Install [[https://framagit.org/steckerhalter/quelpa-use-package#installation][quelpa-use-package]] (which can be installed directly from MELPA).
2.  Add this form to your init file:

#+BEGIN_SRC elisp
  (use-package org-ql
    :quelpa (org-ql :fetcher github :repo "alphapapa/org-ql"))
#+END_SRC

* Usage
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:
:CONTENTS:
- [[#commands][Commands]]
- [[#queries][Queries]]
  - [[#non-sexp-query-syntax][Non-sexp query syntax]]
  - [[#general-predicates][General predicates]]
  - [[#ancestordescendant-predicates][Ancestor/descendant predicates]]
  - [[#datetime-predicates][Date/time predicates]]
- [[#functions--macros][Functions / Macros]]
:END:

# These links work on GitHub's Org renderer but not in Org.

Feedback on these APIs is welcome.  Eventually, after being tested and polished, they will be considered stable. 

# TODO: Find a way to get these examples included in the info manual.
Lisp code examples are in [[examples.org]].

** Commands
:PROPERTIES:
:TOC:      ignore-children
:END:

+  *Showing an agenda-like view:*
     -  [[#org-ql-search][org-ql-search]] (command)
     -  [[#org-ql-view][org-ql-view]] (command)
     -  [[#org-ql-view-sidebar][org-ql-view-sidebar]] (command)
     -  [[#org-ql-view-recent-items][org-ql-view-recent-items]] (command)
+  *Showing a tree in a buffer:*
     -  [[#org-ql-sparse-tree][org-ql-sparse-tree]] (command)
+  *Showing results with Helm*:
     -  [[#helm-org-ql][helm-org-ql]] (command)

*** org-ql-search

/Note: This command supports both sexp queries and [[#non-sexp-query-syntax][non-sexp queries]]./

Read ~QUERY~ and search with ~org-ql~.  Interactively, prompt for these variables:

~BUFFERS-FILES~: ~A~ list of buffers and/or files to search.  Interactively, may also be:

+ ~buffer~: search the current buffer 
+ ~all~: search all Org buffers 
+ ~agenda~: search buffers returned by the function ~org-agenda-files~ 
+ An expression which evaluates to a list of files/buffers 
+ A space-separated list of file or buffer names

~GROUPS~: An ~org-super-agenda~ group set.  See variable ~org-super-agenda-groups~.

~NARROW~: When non-nil, don't widen buffers before searching. Interactively, with prefix, leave narrowed.

~SORT~: One or a list of ~org-ql~ sorting functions, like ~date~ or ~priority~.

*Bindings:* Keys bound in results buffer.
+  =r=: Refresh results.  With prefix, prompt to adjust search parameters.
+  =v=: Show =transient= view dispatcher (like Magit's popups).
+  =C-x C-s=: Save query to variable ~org-ql-views~ (accessible with command ~org-ql-view~).

*Note:* The view buffer is currently put in ~org-agenda-mode~, which means that /some/ Org Agenda commands work, such as jumping to entries and changing item priorities (without necessarily updating the view).  This feature is experimental and not guaranteed to work correctly with all commands.  (It works to the extent it does because the appropriate text properties are placed on each item, imitating an Agenda buffer.)

*** helm-org-ql

/Note: This command uses [[#non-sexp-query-syntax][non-sexp queries]]./

This command displays matches with Helm.  *Note:* Helm is not a package dependency, so this command only works if the package =helm-org= is installed.

+  Press =C-x C-s= in the Helm session to save the results to an =org-ql-search= buffer.

*** org-ql-view

Choose and display a view stored in ~org-ql-views~.

*Bindings:* Keys bound in view buffer.
+  =r=: Refresh results.  With prefix, prompt to adjust search parameters.
+  =v=: Show =transient= view dispatcher (like Magit's popups).
+  =C-x C-s=: Save query to variable ~org-ql-views~ (accessible with command ~org-ql-view~).

*** org-ql-view-sidebar

Show a sidebar window listing views stored in =org-ql-views= for easy access.  In the sidebar, press =RET= or =mouse-1= to show the view at point, and press =c= to customize the view at point.

*** org-ql-view-recent-items

Show items in ~FILES~ from last ~DAYS~ days with timestamps of ~TYPE~.  ~TYPE~ may be ~ts~, ~ts-active~, ~ts-inactive~, ~clocked~, ~closed~, ~deadline~, ~planning~, or ~scheduled~.  =FILES= defaults to those returned by the function =org-agenda-files=.

*** org-ql-sparse-tree

Arguments: ~(query &key keep-previous (buffer (current-buffer)))~

Show a sparse tree for ~QUERY~ in ~BUFFER~ and return number of results.  The tree will show the lines where the query matches, and any other context defined in ~org-show-context-detail~, which see.

~QUERY~ is an ~org-ql~ query sexp (quoted, since this is a function).  ~BUFFER~ defaults to the current buffer.  When ~KEEP-PREVIOUS~ is non-nil (interactively, with prefix), the outline is not reset to the overview state before finding matches, which allows stacking calls to this command.  Runs ~org-occur-hook~ after making the sparse tree.

** Queries
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:
:CONTENTS:
- [[#non-sexp-query-syntax][Non-sexp query syntax]]
- [[#general-predicates][General predicates]]
- [[#ancestordescendant-predicates][Ancestor/descendant predicates]]
- [[#datetime-predicates][Date/time predicates]]
:END:

An =org-ql= query is a lisp form which may contain arbitrary lisp forms, as well as certain built-in predicates.  It is byte-compiled into a predicate function which is tested with point on each heading in an Org buffer; when it returns non-nil, the heading matches the query.

*Notes:*
+  Bare strings like ~"string"~ are automatically converted to ~(regexp "string")~ predicates.
+  Standard numeric comparator function symbols (~<~, ~<=~, ~>~, ~>=~, ~=~ ) need not be quoted when passed as an argument to predicates which accept them.  The resemblance to infix notation is coincidental.

*** Non-sexp query syntax

The command =org-ql-search= also accepts, and the command =helm-org-ql= only accepts, an alternative, non-sexp query syntax.  The syntax is simple, and a few examples of queries in both syntaxes should suffice.  By default, when multiple predicates are used, they are combined with boolean =and=.

| Sexp syntax                                     | Non-sexp syntax                              |
|-------------------------------------------------+----------------------------------------------|
| ~(todo)~                                          | ~todo:~                                        |
| ~(todo "SOMEDAY")~                                | ~todo:SOMEDAY~                                 |
| ~(todo "SOMEDAY" "WAITING")~                      | ~todo:SOMEDAY,WAITING~                         |
| ~(ts :on today)~                                  | ~ts:on=today~                                  |
| ~(ts-active :from "2017-01-01" :to "2018-01-01")~ | ~ts-active:from=2017-01-01,to=2018-01-01~      |
| ~(clocked :on -1)~                                | ~clocked:on=-1~                                |
| ~(heading "quoted phrase" "word")~                | ~heading:"quoted phrase",word~                 |
| ~(and (tags "book" "books") (priority "A"))~      | ~tags:book,books priority:A~                   |
| ~(src :lang "elisp" :regexps ("defun"))~          | ~src:defun,lang=elisp~ or ~src:lang=elisp,defun~ |
| ~(and (tags "space") (not (regexp "moon")))~      | ~tags:space !moon~                             |
| ~(priority >= B)~                                 | ~priority:A,B~                                 |

Note that the =priority= predicate does not support comparators in the non-sexp syntax, so multiple priorities should be passed instead, as seen in the last example.

*** General predicates

Arguments are listed next to predicate names, where applicable.

+  =category (&optional categories)= :: Return non-nil if current heading is in one or more of ~CATEGORIES~ (a list of strings).
+  =done= :: Return non-nil if entry's ~TODO~ keyword is in ~org-done-keywords~.
+  =habit= :: Return non-nil if entry is a habit.
+  =heading (&rest regexps)= :: Return non-nil if current entry's heading matches all ~REGEXPS~ (regexp strings).
     -  Aliases: =h=.
+  =level (level-or-comparator &optional level)= :: Return non-nil if current heading's outline level matches arguments.  The following forms are accepted: ~(level NUMBER)~: Matches if heading level is ~NUMBER~.  ~(level NUMBER NUMBER)~: Matches if heading level is equal to or between NUMBERs.  ~(level COMPARATOR NUMBER)~: Matches if heading level compares to ~NUMBER~ with ~COMPARATOR~.  ~COMPARATOR~ may be ~<~, ~<=~, ~>~, or ~>=~.
+  =outline-path (&rest strings)= :: Return non-nil if current node's outline path matches all of ~STRINGS~.  Each string may appear as a substring in any part of the node's outline path.  For example, the path =Food/Fruits/Grapes= would match ~(olp "Fruit" "Grape")~.
     -  Aliases: ~olp~.
+  =outline-path-segment (&rest strings)= :: Return non-nil if current node's outline path matches ~STRINGS~.  Matches ~STRINGS~ as a contiguous segment of the outline path.  Each string is compared as a substring.  For example the path ~Food/Fruits/Grapes~ would match ~(olps "Fruit" "Grape")~ but not ~(olps "Food" "Grape")~.
     -  Aliases: ~olps~.
+  =path (&rest regexps)= :: Return non-nil if current heading's buffer's filename path matches any of ~REGEXPS~ (regexp strings).  Without arguments, return non-nil if buffer is file-backed.
+  =priority (&rest args)= :: Return non-nil if current heading has a certain priority.  ~ARGS~ may be either a list of one or more priority letters as strings, or a comparator function symbol followed by a priority letter string.  For example:  ~(priority "A") (priority "A" "B") (priority '>= "B")~ Note that items without a priority cookie never match this predicate (while Org itself considers items without a cookie to have the default priority, which, by default, is equal to priority ~B~).
+  =property (property &optional value)= :: Return non-nil if current entry has ~PROPERTY~ (a string), and optionally ~VALUE~ (a string).  Note that property inheritance is currently /not/ enabled for this predicate.  If you need to test with inheritance, you could use a custom predicate form, like ~(org-entry-get (point) "PROPERTY" 'inherit)~.
+  =regexp (&rest regexps)= :: Return non-nil if current entry matches all of ~REGEXPS~ (regexp strings).  Matches against entire entry, from beginning of its heading to the next heading.
     -  Aliases: =r=.
+  ~src (&key lang regexps)~ :: Return non-nil if current entry contains an Org Babel source block.  If ~LANG~ is non-nil, match blocks of that language.  If ~REGEXPS~ is non-nil, require that block's contents match all regexps.
+  =tags (&optional tags)= :: Return non-nil if current heading has one or more of ~TAGS~ (a list of strings).  Tests both inherited and local tags.
+  =tags-inherited (&optional tags)= :: Return non-nil if current heading's inherited tags include one or more of ~TAGS~ (a list of strings).  If ~TAGS~ is nil, return non-nil if heading has any inherited tags.
     -  Aliases: ~inherited-tags~, ~tags-i~, ~itags~.
+  =tags-local (&optional tags)= :: Return non-nil if current heading's local tags include one or more of ~TAGS~ (a list of strings).  If ~TAGS~ is nil, return non-nil if heading has any local tags.
     -  Aliases: ~local-tags~, ~tags-l~, ~ltags~.
+  =tags-all (tags)= :: Return non-nil if current heading includes all of ~TAGS~.  Tests both inherited and local tags.
     -  Aliases: ~tags&~.
+  =todo (&optional keywords)= :: Return non-nil if current heading is a ~TODO~ item.  With ~KEYWORDS~, return non-nil if its keyword is one of ~KEYWORDS~ (a list of strings).  When called without arguments, only matches non-done tasks (i.e. does not match keywords in ~org-done-keywords~).

*** Ancestor/descendant predicates

+  =ancestors (&optional query)= :: Return non-nil if current heading has ancestor headings.  If ~QUERY~, return non-nil if an ancestor heading matches it.  This selector may be nested.
+  =children (&optional query)= :: Return non-nil if current heading has direct child headings.  If ~QUERY~, return non-nil if a child heading matches it.  This selector may be nested, e.g. to match grandchild headings.
+  =descendants (&optional query)= :: Return non-nil if current heading has descendant headings.  If ~QUERY~, return non-nil if a descendant heading matches it.  This selector may be nested (if you can grok the nesting!).
+  =parent (&optional query)= :: Return non-nil if current heading has a direct parent heading.  If ~QUERY~, return non-nil if the parent heading matches it.  This selector may be nested, e.g. to match grandparent headings.

*** Date/time predicates

All of these predicates take optional keyword arguments ~:from~, ~:to:~, and ~:on~:

+  If ~:from~, return non-nil if entry has a timestamp on or after ~:from~.
+  If ~:to~, return non-nil if entry has a timestamp on or before ~:to~.
+  If ~:on~, return non-nil if entry has a timestamp on date ~:on~.

Argument values should be either a number of days (positive to look forward, or negative to look backward), a ~ts~ struct, or a string parseable by ~parse-time-string~ (the string may omit the time value).

+  *Predicates*
     -  =ts= :: Return non-nil if current entry has a timestamp in given period.  If no arguments are specified, return non-nil if entry has any timestamp.
     -  =ts-active=, =ts-a= :: Like =ts=, but only matches active timestamps.
     -  =ts-inactive=, =ts-i= :: Like =ts=, but only matches inactive timestamps.

The following predicates, in addition to the keyword arguments, can also take a single argument, a number, which looks backward or forward a number of days.  The number can be negative to invert the direction.

+  *Backward-looking*
     -  =clocked= :: Return non-nil if current entry was clocked in given period.  If no arguments are specified, return non-nil if entry was clocked at any time.  Note: Clock entries are expected to be clocked out.  Currently clocked entries (i.e. with unclosed timestamp ranges) are ignored.
     -  =closed= :: Return non-nil if current entry was closed in given period.  If no arguments are specified, return non-nil if entry was closed at any time.

+  *Forward-looking*
     -  =deadline= :: Return non-nil if current entry has deadline in given period.  If argument is =auto=, return non-nil if entry has deadline within =org-deadline-warning-days=.  If no arguments are specified, return non-nil if entry has any deadline.
     -  =planning= :: Return non-nil if current entry has planning timestamp in given period (i.e. its deadline, scheduled, or closed timestamp).  If no arguments are specified, return non-nil if entry is scheduled at any time.
     -  =scheduled= :: Return non-nil if current entry is scheduled in given period.  If no arguments are specified, return non-nil if entry is scheduled at any time.

** Functions / Macros
:PROPERTIES:
:TOC:      ignore-children
:END:

-  [[#agenda-like-views][Agenda-like views]]
  -  [[#function-org-ql-block][Function: org-ql-block]]
-  [[#listing--acting-on-results][Listing / acting-on results]]
  -  [[#function-org-ql-select][Function: org-ql-select]]
  -  [[#function-org-ql-query][Function: org-ql-query]]
  -  [[#macro-org-ql][Macro: org-ql]]

*** Agenda-like views

**** Function: ~org-ql-block~

For use as a custom agenda block type in ~org-agenda-custom-commands~.  For example, you could define a custom series command like this, which would list all priority A items tagged =Emacs= with to-do keyword =SOMEDAY=, followed by the standard agenda view, in a single buffer:

#+BEGIN_SRC elisp
  (setq org-agenda-custom-commands
        '(("ces" "Custom: Agenda and Emacs SOMEDAY [#A] items"
           ((org-ql-block '(and (todo "SOMEDAY")
                                (tags "Emacs")
                                (priority "A"))
                          ((org-ql-block-header "SOMEDAY :Emacs: High-priority")))
            (agenda)))))
#+END_SRC

Which would be equivalent to a ~tags-todo~ search like this:

#+BEGIN_SRC elisp
  (setq org-agenda-custom-commands
        '(("ces" "Custom: Agenda and Emacs SOMEDAY [#A] items"
           ((tags-todo "PRIORITY=\"A\"+Emacs/!SOMEDAY")
            (agenda)))))
#+END_SRC

However, the ~org-ql-block~ version runs in about 1/5th the time.

The variable =org-ql-block-header= may be bound to a string to use as the block header, otherwise the header is formed automatically.

*** Listing / acting-on results

**** Function: ~org-ql-select~

/Arguments:/ ~(buffers-or-files query &key action narrow sort)~

Return items matching ~QUERY~ in ~BUFFERS-OR-FILES~.

~BUFFERS-OR-FILES~ is a one or a list of files and/or buffers.

~QUERY~ is an ~org-ql~ query sexp (quoted, since this is a function).

~ACTION~ is a function which is called on each matching entry with point at the beginning of its heading.  It may be:

  - ~element~ or nil: Equivalent to ~org-element-headline-parser~.

  - ~element-with-markers~: Equivalent to calling ~org-element-headline-parser~, with markers added using ~org-ql--add-markers~.  Suitable for formatting with ~org-ql-agenda--format-element~, allowing insertion into an Org Agenda-like buffer.

  - A sexp, which will be byte-compiled into a lambda function.

  - A function symbol.

If ~NARROW~ is non-nil, buffers are not widened (the default is to widen and search the entire buffer).

~SORT~ is either nil, in which case items are not sorted; or one or a list of defined ~org-ql~ sorting methods (~date~, ~deadline~, ~scheduled~, ~todo~, ~priority~, or ~random~); or a user-defined comparator function that accepts two items as arguments and returns nil or non-nil.

Examples:

#+BEGIN_SRC elisp
  ;; Return list of to-do headings in inbox file with tags and to-do keywords:
  (org-ql-select "~/org/inbox.org"
    '(todo)
    :action #'org-get-heading)
  ;; => ("TODO Practice leaping tall buildings in a single bound  :personal:" ...)

  ;; Without tags and to-do keywords:
  (org-ql-select "~/org/inbox.org"
    '(todo)
    :action '(org-get-heading t t))
  ;; => ("Practice leaping tall buildings in a single bound" ...)

  ;; Return WAITING heading elements in agenda files:
  (org-ql-select (org-agenda-files)
    '(todo "WAITING")
    :action 'element)
  ;; => ((headline (:raw-value "Visit the moon" ...) ...) ...)

  ;; Since `element' is the default for ACTION, it may be omitted:
  (org-ql-select (org-agenda-files)
    '(todo "WAITING"))
  ;; => ((headline (:raw-value "Visit the moon" ...) ...) ...)
#+END_SRC

**** Function: ~org-ql-query~

/Arguments:/ ~(&key (select 'element-with-markers) from where order-by narrow)~

Like ~org-ql-select~, but arguments are named more like a ~SQL~ query.

+  ~SELECT~ corresponds to the ~org-ql-select~ argument ~ACTION~.
+  ~FROM~ corresponds to the ~org-ql-select~ argument ~BUFFERS-OR-FILES~.
+  ~WHERE~ corresponds to the ~org-ql-select~ argument ~QUERY~.
+  ~ORDER-BY~ corresponds to the ~org-ql-select~ argument ~SORT~, which see.
+  ~NARROW~ corresponds to the ~org-ql-select~ argument ~NARROW~.

Examples:

#+BEGIN_SRC elisp
  ;; Return list of to-do headings in inbox file with tags and to-do keywords:
  (org-ql-query
    :select #'org-get-heading
    :from "~/org/inbox.org"
    :where '(todo))
  ;; => ("TODO Practice leaping tall buildings in a single bound  :personal:" ...)

  ;; Without tags and to-do keywords:
  (org-ql-query
    :select '(org-get-heading t t)
    :from "~/org/inbox.org"
    :where '(todo))
  ;; => ("Practice leaping tall buildings in a single bound" ...)

  ;; Return WAITING heading elements in agenda files:
  (org-ql-query
    :select 'element
    :from (org-agenda-files)
    :where '(todo "WAITING"))
  ;; => ((headline (:raw-value "Visit the moon" ...) ...) ...)

  ;; Since `element' is the default for SELECT, it may be omitted:
  (org-ql-query
    :from (org-agenda-files)
    :where '(todo "WAITING"))
  ;; => ((headline (:raw-value "Visit the moon" ...) ...) ...)
#+END_SRC

**** Macro: ~org-ql~

/Arguments:/ ~(buffers-or-files query &key sort narrow markers action)~

Expands into a call to ~org-ql-select~ with the same arguments.  For convenience, arguments should be unquoted.

* Changelog
:PROPERTIES:
:TOC:      ignore-children
:END:

/Note:/ Breaking changes may be made before version 1.0, but in the event of major changes, attempts at backward compatibility will be made with obsolescence declarations, translation of arguments, etc.  Users who need stability guarantees before 1.0 may choose to use tagged stable releases.

** 0.5-pre

*Added*
+  View dispatcher using =transient.el= (like Magit), bound to =v= in search/view buffers.

*Changed*
+  Binding to refresh search/view buffers changed to =r=.

** 0.4

/Note:/ The next release, 0.5, may include changes which will require minor updates to written queries (e.g. a few predicates may be renamed).  Users who wish to avoid those changes happening unexpectedly in their configs should avoid upgrading =org-ql= beyond 0.4 automatically, as they will be pushed to the =master= branch when ready.

*Added*
+  *Commands*
     -  ~helm-org-ql-views~, which shows one of ~org-ql-views~ selected with Helm.
     -  ~org-ql-search~ can search files in ~org-directory~; customization options are available in the ~org-ql-search~ group.
     -  ~org-ql-view-refresh~ can be called with a prefix argument to adjust search parameters.
+  *Queries*
     -  Negation of terms in plain queries using ~!~.  For example, ~tags:space !moon~ to exclude entries which contain ~moon~.
     -  Predicates =outline-path= (alias =olp=) and =outline-path-segment= (alias =olps=).
     -  Predicate ~src~, which matches Org Babel source blocks.
     -  Predicates =parent= and =ancestors=.  (Thanks to [[https://github.com/mm--][Josh Moller-Mara]].)
     -  Alias =h= for =heading= predicate.
     -  Alias =r= for =regexp= predicate.  (Thanks to [[https://github.com/tumashu][Feng Shu]].)
+  Info manual.
+  Function ~helm-org-ql-source~, which returns a Helm source that searches given buffers/files with ~helm-org-ql~.  It can be used for custom Helm commands that search certain files.
+  Display a message when views are refreshed.  (Thanks to [[https://github.com/xeijin][xeijin]].)
+  Respect Org Agenda restriction in =org-ql-block=.  (Thanks to [[https://github.com/yantar92][Ihor Radchenko]] for reporting.)
+  Option =org-ql-view-sidebar-sort-views=.
+  Mouseover =help-echo= text for =org-ql-views= default view names.
+  "Dangling tasks" default view in =org-ql-views=.  (Users who have modified =org-ql-views= from the default will not see the new view unless they copy it into their config.)

*Changed*
+  Some default =org-ql-view= views (users who have modified =org-ql-views= from the default will not see the new views unless they copy them into their config):
     -  Rename some views.
     -  "Stuck projects" view (now uses =descendants= instead of =children=, which is more useful.

*Fixed*
+  Inherit file tags when =org-tag-inheritance= is enabled.  (Fixes [[https://github.com/alphapapa/org-ql/issues/55][#55]].  Thanks to [[https://github.com/mskorzhinskiy][Mikhail Skorzhinskiy]].)
+  Call =helm-make-source= directly instead of using =helm-build-sync-source= macro.  (Fixes [[https://github.com/alphapapa/org-ql/issues/60][#60]].  Thanks to [[https://github.com/matthuszagh][Matt Huszagh]] for reporting.)
+  Search/view buffers now always end with a newline, which prevents side-scrolling of the window when calling =end-of-buffer=.
+  Face for done to-do keywords in =org-ql-view= buffers.  (Thanks to [[https://github.com/dsdshcym][Yiming Chen]].)
+  Make view buffers read-only.  (Fixes [[https://github.com/alphapapa/org-ql/issues/72][#72]].  Thanks to [[https://github.com/xeijin][xeijin]].)
+  Sorting with single sorter specified as an atom.  (Thanks to [[https://github.com/legalnonsense][Jeff Filipovits]].)
+  Autoload for =org-ql-block= agenda block.  (Fixes [[https://github.com/alphapapa/org-ql/issues/53][#53]].  Thanks to reports from [[https://github.com/gcantieni][Gus Cantieni]], [[https://github.com/novoid][Karl Voit]], [[https://github.com/rieje][rieje]], and [[https://github.com/jakejx][Jake | Junxuan]].)

*Internal*
+  Added generic node data cache to speed up recursive, tree-based queries.

** 0.3.2

*Fixed*
+  In =org-ql-search=, accept symbol as ~:super-groups~ argument.
+  In the =This week= and =Next week= default =org-ql-views= views, set timestamps for beginning-of-week to 00:00:00 and end-of-week to 23:59:59.
+  Plain quoted-phrases in non-sexp queries.

** 0.3.1

*Fixed*
+  Compatibility with Org 9.2.  Thanks to [[https://github.com/leungbk][Brian Leung]].

** 0.3

*Added*
+  Alternative, non-sexp query syntax for commands =org-ql-search= and =helm-org-ql=.  See [[#non-sexp-query-syntax][documentation]].
+  Command =helm-org-ql=.
+  Command =org-ql-sparse-tree=, like =org-sparse-tree= for =org-ql= queries.  (Thanks to [[https://github.com/akirak][Akira Komamura]].)
+  Command =org-ql-view-sidebar=.
+  Per-buffer, per-heading tag caching, which increases the speed of tags-related queries by 6-7x.
+  More tags-related predicates and aliases:
     -  For inherited tags: =tags-inherited=, =inherited-tags=, =tags-i=, =itags=.
     -  For heading-local tags: =tags-local=, =local-tags=, =tags-l=, =ltags=.
     -  =tags-all=, =tags&=: Matches all given tags using boolean =AND= (rather than boolean =OR=, which the =tags= predicate uses).
+  Variable =org-ql-block-header=, which overrides the default header in =org-ql-block= agenda blocks.
+  Predicate =(path)=.
+  Option =org-ql-views= may now be customized in a guided, structured way with the customization UI (e.g. =M-x customize-option RET org-ql-views RET=, or press =c= in the =org-ql-view-sidebar= buffer).
+  Enable more Org Agenda commands in =org-ql-view= buffers (e.g. setting deadlines and scheduling).  (Fixes [[https://github.com/alphapapa/org-ql/issues/35][#35]].  Thanks to [[https://github.com/mz-pdm][Milan Zamazal]] and [[https://github.com/mskorzhinskiy][Mikhail Skorzhinskii]].)
+  Function =org-ql-select='s =buffers-files= argument can be a function which returns a list of buffers and/or files.

*Changed*
+  Predicate =heading= now accepts multiple regexps, which are matched with boolean =AND=.
+  Predicate =regexp= now matches its regexp arguments with boolean =AND=.
+  Package =org-super-agenda= is now a dependency.  This removes the need for awkward code to handle the case where it's not installed, and makes grouping features always available.  Of course, the global minor mode =org-super-agenda-mode= is not activated by =org-ql=, so no behavior is changed in Org Agenda or =org-ql=; it only means that commands like =org-ql-search= will always provide grouping when called with the appropriate arguments.

*Removed*
+  Macro =org-ql-agenda=.  Instead, use function =org-ql-search=.  See also command =org-ql-view=, etc.

*Fixed*
+  Predicate =heading= now matches only against heading text, i.e. not including tags at the end of the line, to-do keyword, etc.
+  Predicate =todo= now matches case-sensitively, avoiding non-todo-keyword matches (e.g. a heading which begins =Waiting on= will no longer match for a todo keyword =WAITING=).
+  Interactive completion in =org-ql-search=.

*Internal*
+  Refactored code from file =org-ql-agenda.el= into files =org-ql-search.el= and =org-ql-view.el=.  Function and variable names have been changed accordingly.

** 0.2.3

*Fixed*
+  Priority queries could fail to match headings whose to-do keywords had non-alphabetic characters, like =TO-READ=.

** 0.2.2

*Fixed*
+  =(deadline auto)= selector matched entries whose deadlines had a warning period that had not yet been entered (=org-deadline-warning-days= too soon).

** 0.2.1

*Fixed*
+  =(descendants)= selector matched against parent heading instead of only descendants.

** 0.2
:PROPERTIES:
:ID:       67be09f9-e959-4333-9be2-93ad8f458fbe
:END:

*Added*
+  Function ~org-ql-query~, like ~org-ql-select~ but with arguments named more like a SQL query.
+  Bare strings like ~"string"~ can be used in queries, which are converted to ~(regexp "string")~ automatically.
+  Selector ~(regexp)~ accepts multiple regexps to test.
+  Macro ~org-ql~ and functions ~org-ql-query~ and ~org-ql-select~ now also accept a comparator function in their ~:sort~ argument.
+  Function ~org-ql-block~, which works as an Org Agenda series/composite/block command, usable in custom agenda commands defined in variable ~org-agenda-custom-commands~.  (Inspired by [[https://github.com/pestctrl/emacs-config/blob/84c557982a860e86d6f67976a82ea776a7bd2c7a/config-org-new.org#my-own-agenda-renderer][Benson Chu's config]].)
+  Function ~org-ql-agenda--agenda~ optionally takes a list of entries as an argument.
+  Selectors ~ts-a~ and ~ts-i~, aliases for ~ts-active~ and ~ts-inactive~.
+  Selector ~ts~ now accepts a ~:type~ argument.
+  Face =org-ql-agenda-due-date=.
+  Selectors ~(children)~ and ~(descendants)~.
+  Function ~org-ql-search~ and macro ~org-ql-agenda~ accept a ~:title~ argument, which is displayed in the header.
+  Command ~org-ql-search~ offers global ~org-super-agenda-groups~ in completion.
+  Customization group ~org-ql~.
+  Command ~org-ql-view~, which displays views saved to variable ~org-ql-views~, which can be saved from ~org-ql-search~ buffers with command ~org-ql-search-save~, which is bound to =C-x C-s= in view buffers.
+  Variable ~org-ql-view-map~, active in view buffers displayed by ~org-ql-search~, ~org-ql-agenda~, and ~org-ql-view~.
+  =random= sort method.
+  Save position when refreshing search buffers.

*Changed*
+  Function ~org-ql-query~ renamed to ~org-ql-select~.  ~org-ql-query~ now refers to a new function.
+  Macro ~org-ql~ no longer accepts a ~:markers~ argument.  Instead, use argument ~:action element-with-markers~.  See function ~org-ql-select~, which ~org-ql~ calls.
+  Selector ~(todo)~ no longer matches "done" keywords when used without arguments (i.e. the ones in variable ~org-done-keywords~).
+  Overhauled date/time-based predicates.  See documentation for new argument signatures.

*Removed*
+  Selector ~(date)~, replaced by ~(ts)~.

*Fixed*
+  Handle date ranges in date-based selectors.  (Thanks to [[https://github.com/codygman][Cody Goodman]], [[https://github.com/swflint][Samuel W. Flint]], and [[https://github.com/vikasrawal][Vikas Rawal]].)
+  Don't overwrite bindings in =org-agenda-mode-map=.
+  Don't search buffers without headings, and show a message if the user attempts it.
+  Don't search hidden/special buffers.
+  Properly accept arbitrary sort functions in =org-ql-select=, etc.  (Fixes [[https://github.com/alphapapa/org-ql/issues/37][#37]].  Thanks to [[https://github.com/mz-pdm][Milan Zamazal]].)
+  Planning-line-related predicates searched too far into entries.
+  Add autoloads.  (Fixes [[https://github.com/alphapapa/org-ql/pull/36/files#][#36]].  Thanks to [[https://github.com/akirak][Akira Komamura]].)

*Compatibility*
+  Fixes for compatibility with Org 9.2.  (Thanks to [[https://github.com/ataias][Ataias Pereira Reis]] and [[https://github.com/dakra][Daniel Kraus]].)

*Internal*
+  Optimizations for some query selectors, e.g. =regexp= and =todo=.  These can provide a significant improvement for some queries.  See benchmarks in [[file:notes.org][notes.org]].
+  Library [[https://github.com/alphapapa/ts.el][ts]] is now used for parsing and comparing timestamps.

** 0.1

First tagged release.

* Notes
:PROPERTIES:
:TOC:      :ignore this
:END:

** Comparison with Org Agenda searches

Of course, queries like these can already be written with Org Agenda searches, but the syntax can be complex.  For example, this query would be difficult to write in a standard Org Agenda search, because it matches against a to-do keyword /and/ a plain-text search.  As described in the [[https://orgmode.org/worg/org-tutorials/advanced-searching.html#combining-metadata-and-full-text-queries][advanced searching tutorial]], it would require using ~org-search-view~ with a query with specific regular expression syntax, like this:

#+BEGIN_EXAMPLE
  +lisp +{^\*+\s-+TO-READ\s-}
#+END_EXAMPLE

But with ~org-ql-agenda~, you would write:

#+BEGIN_SRC elisp
  (org-ql-agenda
    (and (regexp "lisp")
         (todo "TO-READ")))
#+END_SRC

** org-sidebar

This package is used by [[https://github.com/alphapapa/org-sidebar][org-sidebar]], which presents a customizable agenda-like view in a sidebar window.

* License
:PROPERTIES:
:TOC:      :ignore this
:END:

GPLv3

* COMMENT Code                                                     :noexport:
:PROPERTIES:
:TOC:      :ignore this
:END:

# The COMMENT keyword prevents GitHub's renderer from showing this entry.

Code used to update this document.

** Predicates

Generates the predicate subtree.

#+BEGIN_SRC elisp :results silent :exports code
  (defun org-ql--readme-update-predicates ()
    "Update predicate subtree in current document."
    (interactive)
    (org-ql--readme-replace-node '("Usage" "Queries" "Predicates") (org-ql--readme-predicate-list)))

  (defun org-ql--readme-replace-node (outline-path string)
    "Replace contents of node at OUTLINE-PATH with STRING."
    (org-with-wide-buffer
     (-let* ((subtree-marker (org-find-olp outline-path t))
             ((_headline element) (progn
                                    (goto-char subtree-marker)
                                    (org-element-headline-parser (point-max))))
             ((&plist :contents-begin beg :contents-end end) element))
       (goto-char beg)
       (delete-region (point) (1- end))
       (insert string "\n"))))

  (defun org-ql--readme-predicate-list ()
    "Return an Org list string documenting predicates."
    (concat (unpackaged/docstring-to-org
             "Arguments are listed next to predicate names, where applicable.

  Note that, for convenience, standard numeric comparator function symbols (`<', `=', etc.) do not need to be quoted when passed as an argument to these predicates.  The resemblance to infix notation is coincidental.  See examples in documentation.\n\n")
            (s-join "\n" (->> org-ql-predicates
                              (--sort (string< (symbol-name (plist-get it :name))
                                               (symbol-name (plist-get other :name))))
                              (--map (-let* (((&plist :name name :docstring docstring :fn fn :args args) it)
                                             (args (->> args
                                                        (--replace-where (listp it) (car it))
                                                        (--replace-where (eq '&rest it) '&optional))))
                                       (if docstring
                                           (progn
                                             (setq docstring (s-replace "\n" "  " docstring))
                                             (format "+  ~%s%s~ :: %s" name
                                                     (if args
                                                         (format " %s" args)
                                                       "")
                                                     (unpackaged/docstring-to-org docstring)))
                                         (when (s-prefix? "org-ql-" (symbol-name name))
                                           (warn "No docstring for: %s" name))
                                         nil)))
                              -non-nil))))
#+END_SRC

*** TODO Use async

If ~org-ql~ is loaded byte-compiled, the argument lists are not named properly (not sure why, as ~help-function-arglist~ is supposed to handle that).  We could run the function in another Emacs process with ~async~ to avoid this.

* COMMENT Export setup                                             :noexport:
:PROPERTIES:
:TOC:      :ignore this
:END:

# Copied from org-super-agenda's readme, in which much was borrowed from Org's =org-manual.org=.

#+OPTIONS: broken-links:t *:t

** Info export options

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Org QL: (org-ql)
#+TEXINFO_DIR_DESC: Query language, search commands, and saved views for Org files

# NOTE: We could use these, but that causes a pointless error, "org-compile-file: File "..README.info" wasn't produced...", so we just rename the files in the after-save-hook instead.
# #+TEXINFO_FILENAME: org-ql.info
# #+EXPORT_FILE_NAME: org-ql.texi

** File-local variables

# NOTE: Setting org-comment-string buffer-locally is a nasty hack to work around GitHub's org-ruby's HTML rendering, which does not respect noexport tags.  The only way to hide this tree from its output is to use the COMMENT keyword, but that prevents Org from processing the export options declared in it.  So since these file-local variables don't affect org-ruby, wet set org-comment-string to an unused keyword, which prevents Org from deleting this tree from the export buffer, which allows it to find the export options in it.  And since org-export does respect the noexport tag, the tree is excluded from the info page.

# Local Variables:
# before-save-hook: org-make-toc
# after-save-hook: (lambda nil (when (and (require 'ox-texinfo nil t) (org-texinfo-export-to-info)) (delete-file "README.texi") (rename-file "README.info" "org-ql.info" t)))
# org-export-initial-scope: buffer
# org-comment-string: "NOTCOMMENT"
# End:
